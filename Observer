from __future__ import annotations
from abc import ABC, abstractmethod
from random import uniform
from typing import List

class Stock(ABC):

    @abstractmethod
    def attach(self, trader: Trader) -> None:
        pass

    @abstractmethod
    def detach(self, trader: Trader) -> None: 
        pass

    @abstractmethod
    def notify(self) -> None: 
        pass

class ConcreteStock(Stock):
    _price: float = None
    _traders: List[Trader] = []

    def attach(self, trader: Trader) -> None:
        print("Stock: Attached a trader.")
        self._traders.append(trader)

    def detach(self, trader: Trader) -> None:
        self._traders.remove(trader)

    def notify(self) -> None:
        print("Stock: Notifying traders...")
        for trader in self._traders:
            trader.update(self)

    def fluctuate_price(self) -> None:

        print("\nStock: Fluctuating price...")
        self._price = round(uniform(50, 150), 2)
        print(f"Stock: Price changed to ${self._price}")
        self.notify()

class Trader(ABC):
   
    @abstractmethod
    def update(self, stock: Stock) -> None:
        pass

class Buyer(Trader):
    def update(self, stock: Stock) -> None:
        if stock._price < 100:
            print("Buyer: Stock price is low, considering buying.")

class Seller(Trader):

    def update(self, stock: Stock) -> None:
        if stock._price > 120:
            print("Seller: Stock price is high, considering selling.")


if __name__ == "__main__":

    stock = ConcreteStock()

    buyer = Buyer()
    stock.attach(buyer)

    seller = Seller()
    stock.attach(seller)

    stock.fluctuate_price()
    stock.fluctuate_price()

    stock.detach(buyer)

    stock.fluctuate_price()

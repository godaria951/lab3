import unittest

class Observer:
    def update(self, message):
        pass

class Observable:
    def __init__(self):
        self.observers = []

    def register(self, observer):
        if observer not in self.observers:
            self.observers.append(observer)

    def unregister(self, observer):
        if observer in self.observers:
            self.observers.remove(observer)

    def notify_observers(self, message):
        for observer in self.observers:
            observer.update(message)

class ConcreteObserver(Observer):
    def __init__(self, name):
        self.name = name
        self.message_received = None

    def update(self, message):
        self.message_received = message

class TestObservable(unittest.TestCase):
    def test_register_unregister(self):
        observable = Observable()
        observer1 = ConcreteObserver('Observer 1')
        observer2 = ConcreteObserver('Observer 2')

        observable.register(observer1)
        observable.register(observer2)

        self.assertEqual(len(observable.observers), 2)

        observable.unregister(observer1)
        self.assertEqual(len(observable.observers), 1)

        observable.unregister(observer2)
        self.assertEqual(len(observable.observers), 0)

    def test_notify_observers(self):
        observable = Observable()
        observer1 = ConcreteObserver('Observer 1')
        observer2 = ConcreteObserver('Observer 2')

        observable.register(observer1)
        observable.register(observer2)

        message = 'Hello, Observers!'
        observable.notify_observers(message)

        self.assertEqual(observer1.message_received, message)
        self.assertEqual(observer2.message_received, message)

suite = unittest.TestLoader().loadTestsFromTestCase(TestObservable)
unittest.TextTestRunner().run(suite)

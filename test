from __future__ import annotations
import unittest
from unittest.mock import patch
from io import StringIO
from abc import ABC, abstractmethod
from random import uniform
from typing import List

class Stock(ABC):

    @abstractmethod
    def attach(self, trader: Trader) -> None:
        pass

    @abstractmethod
    def detach(self, trader: Trader) -> None:
        pass

    @abstractmethod
    def notify(self) -> None:
        pass

class ConcreteStock(Stock):
    _price: float = None
    _traders: List[Trader] = []

    def attach(self, trader: Trader) -> None:
        print("Stock: Attached a trader.")
        self._traders.append(trader)

    def detach(self, trader: Trader) -> None:
        self._traders.remove(trader)

    def notify(self) -> None:
        print("Stock: Notifying traders...")
        for trader in self._traders:
            trader.update(self)

    def fluctuate_price(self) -> None:
        print("\nStock: Fluctuating price...")
        self._price = round(uniform(50, 150), 2)
        print(f"Stock: Price changed to ${self._price}")
        self.notify()

class Trader(ABC):
   
    @abstractmethod
    def update(self, stock: Stock) -> None:
        pass

class Buyer(Trader):
  
    def update(self, stock: Stock) -> None:
        if stock._price < 100:
            print("Buyer: Stock price is low, considering buying.")

class Seller(Trader):
    
    def update(self, stock: Stock) -> None:
        if stock._price > 120:
            print("Seller: Stock price is high, considering selling.")

class TestObserverPattern(unittest.TestCase):
    def setUp(self):
        self.stock = ConcreteStock()

    def test_attach_detach_buyer(self):
        buyer = Buyer()
        self.stock.attach(buyer)
        self.assertIn(buyer, self.stock._traders)
        self.stock.detach(buyer)
        self.assertNotIn(buyer, self.stock._traders)

    def test_attach_detach_seller(self):
        seller = Seller()
        self.stock.attach(seller)
        self.assertIn(seller, self.stock._traders)
        self.stock.detach(seller)
        self.assertNotIn(seller, self.stock._traders)

    @patch('sys.stdout', new_callable=StringIO)
    def test_buyer_update(self, mock_stdout):
        buyer = Buyer()
        self.stock.attach(buyer)
        self.stock._price = 90
        self.stock.notify()
        self.assertIn("Buyer: Stock price is low, considering buying.", mock_stdout.getvalue())

    @patch('sys.stdout', new_callable=StringIO)
    def test_seller_update(self, mock_stdout):
        seller = Seller()
        self.stock.attach(seller)
        self.stock._price = 130
        self.stock.notify()
        self.assertIn("Seller: Stock price is high, considering selling.", mock_stdout.getvalue())

    @patch('sys.stdout', new_callable=StringIO)
    def test_fluctuate_price(self, mock_stdout):
        self.stock.fluctuate_price()
        self.assertIn("Stock: Fluctuating price...", mock_stdout.getvalue())
        self.assertTrue(self.stock._price >= 50 and self.stock._price <= 150)
        self.assertIn(f"Stock: Price changed to ${self.stock._price}", mock_stdout.getvalue())


if __name__ == '__main__':
    suite = unittest.TestLoader().loadTestsFromTestCase(TestObserverPattern)
    unittest.TextTestRunner().run(suite)
